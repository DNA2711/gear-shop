import { db } from "@/lib/database";
import {
  CreateNotificationRequest,
  NotificationCategory,
  NotificationType,
} from "@/types/notification";

export class NotificationService {
  // T·∫°o th√¥ng b√°o cho kh√°ch h√†ng khi ƒë·∫∑t h√†ng th√†nh c√¥ng
  static async createOrderSuccessNotification(userId: number, orderData: any) {
    try {
      const notification: CreateNotificationRequest = {
        user_id: userId,
        title: "üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!",
        message: `ƒê∆°n h√†ng #${
          orderData.orderId
        } c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng v·ªõi t·ªïng gi√° tr·ªã ${formatPrice(
          orderData.totalAmount
        )}. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng v√† th√¥ng b√°o c·∫≠p nh·∫≠t cho b·∫°n s·ªõm nh·∫•t.`,
        type: "success" as NotificationType,
        category: "order_created" as NotificationCategory,
        data: {
          order_id: orderData.orderId,
          total_amount: orderData.totalAmount,
          items_count: orderData.itemsCount,
        },
      };

      return await this.createNotification(notification);
    } catch (error) {
      console.error("Error creating order success notification:", error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o cho kh√°ch h√†ng khi tr·∫°ng th√°i ƒë∆°n h√†ng thay ƒë·ªïi
  static async createOrderStatusNotification(userId: number, orderData: any) {
    try {
      let title = "";
      let message = "";
      let type: NotificationType = "info";
      let category: NotificationCategory = "order_updated";

      switch (orderData.status) {
        case "paid":
          title = "üí≥ Thanh to√°n th√†nh c√¥ng";
          message = `ƒê∆°n h√†ng #${orderData.orderId} ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng. Ch√∫ng t√¥i ƒëang chu·∫©n b·ªã ƒë√≥ng g√≥i s·∫£n ph·∫©m cho b·∫°n.`;
          type = "success";
          category = "payment_success";
          break;
        case "processing":
          title = "üì¶ ƒêang x·ª≠ l√Ω ƒë∆°n h√†ng";
          message = `ƒê∆°n h√†ng #${orderData.orderId} ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o khi ƒë∆°n h√†ng ƒë∆∞·ª£c giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn.`;
          type = "info";
          break;
        case "shipped":
          title = "üöö ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao v·∫≠n chuy·ªÉn";
          message = `ƒê∆°n h√†ng #${orderData.orderId} ƒë√£ ƒë∆∞·ª£c giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn. B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng qua m√£ v·∫≠n ƒë∆°n.`;
          type = "info";
          break;
        case "delivered":
          title = "‚úÖ Giao h√†ng th√†nh c√¥ng";
          message = `ƒê∆°n h√†ng #${orderData.orderId} ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i Gear Shop!`;
          type = "success";
          category = "order_delivered";
          break;
        case "cancelled":
          title = "‚ùå ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy";
          message = `ƒê∆°n h√†ng #${orderData.orderId} ƒë√£ b·ªã h·ªßy. N·∫øu b·∫°n ƒë√£ thanh to√°n, s·ªë ti·ªÅn s·∫Ω ƒë∆∞·ª£c ho√†n l·∫°i trong 3-5 ng√†y l√†m vi·ªác.`;
          type = "warning";
          category = "order_cancelled";
          break;
        default:
          title = "üìã C·∫≠p nh·∫≠t ƒë∆°n h√†ng";
          message = `ƒê∆°n h√†ng #${orderData.orderId} c√≥ c·∫≠p nh·∫≠t m·ªõi. Vui l√≤ng ki·ªÉm tra chi ti·∫øt ƒë∆°n h√†ng.`;
      }

      const notification: CreateNotificationRequest = {
        user_id: userId,
        title,
        message,
        type,
        category,
        data: {
          order_id: orderData.orderId,
          status: orderData.status,
          previous_status: orderData.previousStatus,
        },
      };

      return await this.createNotification(notification);
    } catch (error) {
      console.error("Error creating order status notification:", error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o cho admin khi c√≥ ƒë∆°n h√†ng m·ªõi
  static async createNewOrderNotificationForAdmin(orderData: any) {
    try {
      // L·∫•y danh s√°ch admin users
      const adminQuery = "SELECT user_id FROM users WHERE role = 'admin'";
      const admins = await db.query(adminQuery, []);

      const notifications = admins.map((admin: any) => ({
        user_id: admin.user_id,
        title: "üõí ƒê∆°n h√†ng m·ªõi!",
        message: `C√≥ ƒë∆°n h√†ng m·ªõi #${orderData.orderId} t·ª´ kh√°ch h√†ng ${
          orderData.customerName
        } v·ªõi gi√° tr·ªã ${formatPrice(
          orderData.totalAmount
        )}. Vui l√≤ng ki·ªÉm tra v√† x·ª≠ l√Ω.`,
        type: "info" as NotificationType,
        category: "admin_new_order" as NotificationCategory,
        data: {
          order_id: orderData.orderId,
          customer_name: orderData.customerName,
          total_amount: orderData.totalAmount,
          items_count: orderData.itemsCount,
          customer_id: orderData.customerId,
        },
      }));

      // T·∫°o th√¥ng b√°o cho t·∫•t c·∫£ admin
      const promises = notifications.map((notification) =>
        this.createNotification(notification)
      );

      return await Promise.all(promises);
    } catch (error) {
      console.error("Error creating admin notifications:", error);
      throw error;
    }
  }

  // T·∫°o th√¥ng b√°o thanh to√°n th·∫•t b·∫°i
  static async createPaymentFailedNotification(userId: number, orderData: any) {
    try {
      const notification: CreateNotificationRequest = {
        user_id: userId,
        title: "‚ùå Thanh to√°n th·∫•t b·∫°i",
        message: `Thanh to√°n cho ƒë∆°n h√†ng #${orderData.orderId} ƒë√£ th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫•n ƒë·ªÅ ti·∫øp t·ª•c x·∫£y ra.`,
        type: "error",
        category: "payment_failed",
        data: {
          order_id: orderData.orderId,
          error_code: orderData.errorCode,
          error_message: orderData.errorMessage,
        },
      };

      return await this.createNotification(notification);
    } catch (error) {
      console.error("Error creating payment failed notification:", error);
      throw error;
    }
  }

  // Function c∆° b·∫£n ƒë·ªÉ t·∫°o notification trong database
  private static async createNotification(
    notification: CreateNotificationRequest
  ) {
    try {
      const insertQuery = `
        INSERT INTO notifications (user_id, title, message, type, category, data)
        VALUES (?, ?, ?, ?, ?, ?)
      `;

      const result = await db.query(insertQuery, [
        notification.user_id,
        notification.title,
        notification.message,
        notification.type,
        notification.category,
        notification.data ? JSON.stringify(notification.data) : null,
      ]);

      return {
        success: true,
        notification_id: result.insertId,
      };
    } catch (error) {
      console.error("Error inserting notification:", error);
      throw error;
    }
  }

  // Utility: L·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa user
  static async getUnreadCount(userId: number): Promise<number> {
    try {
      const query = `
        SELECT COUNT(*) as unread_count 
        FROM notifications 
        WHERE user_id = ? AND is_read = FALSE
      `;
      const [result] = await db.query(query, [userId]);
      return result?.unread_count || 0;
    } catch (error) {
      console.error("Error getting unread count:", error);
      return 0;
    }
  }
}

// Helper function for formatting price
function formatPrice(amount: number): string {
  return new Intl.NumberFormat("vi-VN", {
    style: "currency",
    currency: "VND",
  }).format(amount);
}
